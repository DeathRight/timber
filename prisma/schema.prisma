// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Provider {
  EMAIL
  GITHUB
  GOOGLE
  TWITTER
}

model Account {
  /// Snowflake (simpleflake) based BigInt ID
  id           String    @id
  createdAt    DateTime  @default(now())
  /// ISO date this row was last updated
  updatedAt    DateTime  @updatedAt
  /// Whether account is globally disabled
  disabled     Boolean   @default(false)
  /// Auth provider ID list. Format: [{"provider": "TWITTER", "id": "id_here"}, ...]
  authInfo     Json[]
  /// Original/primary auth provider
  authProvider Provider? @default(EMAIL)
  email        String?
  password     String?
  userIds      BigInt[]
  users        User[]
}

model User {
  /// Snowflake (simpleflake) based BigInt ID
  id           BigInt      @id
  /// Prisma client relation to account connected to user
  account      Account     @relation(fields: [accountId], references: [id])
  /// Account ID that this user is connected to
  accountId    String
  /// Global display name
  displayName  String
  /// URL for user's avatar
  avatar       String?
  createdAt    DateTime    @default(now())
  /// Timestamp in milliseconds since epoch the user was last active
  lastSeen     Int
  /// Whether user is globally disabled
  disabled     Boolean     @default(false)
  /// Prisma client relation to servers user is a member of
  servers      Server[]    @relation("servers")
  /// Array of server IDs the user is a member of
  serverIds    BigInt[]
  /// Array of user IDs the user is friends with
  friendIds    BigInt[]
  /// Array of GroupChat IDs for group chats the user is a member of
  groupChatIds BigInt[]
  /// Prisma client relation to group chat's the user is a member of
  groupChats   GroupChat[] @relation("groupChats")
  /// ISO date this row was last updated
  updatedAt    DateTime    @updatedAt
  /// Prisma client relation to servers user owns
  ownedServers Server[]    @relation("ownedServers")
}

model Server {
  /// Snowflake (simpleflake) based BigInt ID
  id          BigInt   @id
  /// Global display name
  displayName String
  /// Description of server
  description String?
  /// Starting domain ID
  start       String   @default("general")
  /// URL for server's thumbnail
  thumbnail   String?
  /// ISO date the server was created at
  createdAt   DateTime @default(now())
  /// ISO date this row was last updated
  updatedAt   DateTime @updatedAt
  /// Prisma client relation to user that owns the server
  owner       User     @relation("ownedServers", fields: [ownerId], references: [id])
  /// User ID of the owner
  ownerId     BigInt
  /// Prisma client relation to users who are members of this server
  users       User[]   @relation("servers", references: [id])
  /// Array of user IDs that are members of this server
  userIds     BigInt[]
  /// Array of domain IDs that this server contains
  domainIds   BigInt[]
  /// Prisma client relation to domains that this server contains
  domains     Domain[] @relation("domains")
}

model Domain {
  /// Snowflake (simpleflake) based BigInt ID
  id          BigInt   @id
  /// ID of server that contains this domain
  serverId    BigInt
  /// Description of domain
  description String?
  /// Prisma client relation to server that contains this domain
  server      Server   @relation("domains", fields: [serverId], references: [id])
  /// Global display name
  displayName String
  /// Starting room ID
  start       String   @default("general")
  /// URL for domain's thumbnail
  thumbnail   String?
  /// ISO date the domain was created at
  createdAt   DateTime @default(now())
  /// ISO date this row was last updated
  updatedAt   DateTime @updatedAt
  /// Array of room ids that this domain contains
  roomIds     BigInt[]
  /// Prisma client relation to rooms that this domain contains
  rooms       Room[]   @relation("rooms")
}

model Room {
  /// Snowflake (simpleflake) based BigInt ID
  id          BigInt   @id
  /// ID of domain that contains this room
  domainId    BigInt
  /// Prisma client relation to domain that contains this room
  domain      Domain   @relation("rooms", fields: [domainId], references: [id])
  /// Global display name
  displayName String
  /// URL for room's thumbnail
  thumbnail   String?
  /// ISO date the room was created at
  createdAt   DateTime @default(now())
  /// ISO date this row was last updated
  updatedAt   DateTime @updatedAt
}

model GroupChat {
  /// Snowflake (simpleflake) based BigInt ID
  id          BigInt   @id
  /// Global display name
  displayName String
  /// Description of GroupChat
  description String
  /// URL for group chat's thumbnail
  thumbnail   String?
  /// ISO date the group chat was created at
  createdAt   DateTime @default(now())
  /// ISO date this row was last updated
  updatedAt   DateTime @updatedAt
  /// Prisma client relation to users who are members of this group chat
  users       User[]   @relation("groupChats", references: [id])
  /// Array of user IDs that are members of this group chat
  userIds     BigInt[]
}
