/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../../../../util/context"
import type { AuthInfo } from "./../../gql"
import type { ProvidersE } from "./../provider"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    bigint<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
     */
    timestamp<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Timestamp";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "EmailAddress";
    /**
     * Sign-in provider type
     */
    providerenum<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Provider";
    /**
     * AuthInfo JSON object, with linked 3rd party provider IDs and/or user email under 'ids'
     */
    authinfo<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "AuthInfo";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    bigint<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
     */
    timestamp<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Timestamp";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "EmailAddress";
    /**
     * Sign-in provider type
     */
    providerenum<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Provider";
    /**
     * AuthInfo JSON object, with linked 3rd party provider IDs and/or user email under 'ids'
     */
    authinfo<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "AuthInfo";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Provider: ProvidersE
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  AuthInfo: AuthInfo
  BigInt: BigInt
  DateTime: Date
  EmailAddress: string
  Timestamp: number
}

export interface NexusGenObjects {
  Query: {};
  User: { // root type
    authInfo: NexusGenScalars['AuthInfo']; // AuthInfo!
    authProvider: NexusGenEnums['Provider']; // Provider!
    avatar?: string | null; // String
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    disabled?: boolean | null; // Boolean
    displayName: string; // String!
    friends?: Array<NexusGenScalars['BigInt'] | null> | null; // [BigInt]
    groupchats?: Array<NexusGenScalars['BigInt'] | null> | null; // [BigInt]
    id: NexusGenScalars['BigInt']; // BigInt!
    lastSeen?: NexusGenScalars['Timestamp'] | null; // Timestamp
    servers?: Array<NexusGenScalars['BigInt'] | null> | null; // [BigInt]
  }
}

export interface NexusGenInterfaces {
  Node: NexusGenRootTypes['User'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Query: { // field return type
    userById: NexusGenRootTypes['User'] | null; // User
    userByName: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    authInfo: NexusGenScalars['AuthInfo']; // AuthInfo!
    authProvider: NexusGenEnums['Provider']; // Provider!
    avatar: string | null; // String
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    disabled: boolean | null; // Boolean
    displayName: string; // String!
    friends: Array<NexusGenScalars['BigInt'] | null> | null; // [BigInt]
    groupchats: Array<NexusGenScalars['BigInt'] | null> | null; // [BigInt]
    id: NexusGenScalars['BigInt']; // BigInt!
    lastSeen: NexusGenScalars['Timestamp'] | null; // Timestamp
    servers: Array<NexusGenScalars['BigInt'] | null> | null; // [BigInt]
  }
  Node: { // field return type
    id: NexusGenScalars['BigInt']; // BigInt!
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    userById: 'User'
    userByName: 'User'
  }
  User: { // field return type name
    authInfo: 'AuthInfo'
    authProvider: 'Provider'
    avatar: 'String'
    createdAt: 'Timestamp'
    disabled: 'Boolean'
    displayName: 'String'
    friends: 'BigInt'
    groupchats: 'BigInt'
    id: 'BigInt'
    lastSeen: 'Timestamp'
    servers: 'BigInt'
  }
  Node: { // field return type name
    id: 'BigInt'
  }
}

export interface NexusGenArgTypes {
  Query: {
    userById: { // args
      id: NexusGenScalars['BigInt']; // BigInt!
    }
    userByName: { // args
      displayName: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  Node: "User"
}

export interface NexusGenTypeInterfaces {
  User: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: false
    __typename: false
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}