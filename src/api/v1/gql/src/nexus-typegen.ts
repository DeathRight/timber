/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../../../../util/context"
import type { AuthInfo } from "./../nexus"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * AuthInfo JSON object. Format: [{"provider": "TWITTER", "id": "id_here"}]
     */
    authinfo<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "AuthInfo";
    /**
     * The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
     */
    timestamp<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Timestamp";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "EmailAddress";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * AuthInfo JSON object. Format: [{"provider": "TWITTER", "id": "id_here"}]
     */
    authinfo<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "AuthInfo";
    /**
     * The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
     */
    timestamp<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Timestamp";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "EmailAddress";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Provider: "EMAIL" | "GITHUB" | "GOOGLE" | "TWITTER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  AuthInfo: AuthInfo
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  EmailAddress: string
  Json: any
  Timestamp: number
}

export interface NexusGenObjects {
  Account: { // root type
    authInfo?: NexusGenScalars['AuthInfo'] | null; // AuthInfo
    authProvider: NexusGenEnums['Provider']; // Provider!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    disabled: boolean; // Boolean!
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    id: NexusGenScalars['BigInt']; // BigInt!
    password?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Domain: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    displayName: string; // String!
    id: NexusGenScalars['BigInt']; // BigInt!
    roomIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
    serverId: NexusGenScalars['BigInt']; // BigInt!
    start: string; // String!
    thumbnail?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  GroupChat: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    displayName: string; // String!
    id: NexusGenScalars['BigInt']; // BigInt!
    thumbnail?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
  }
  Query: {};
  Room: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    displayName: string; // String!
    domainId: NexusGenScalars['BigInt']; // BigInt!
    id: NexusGenScalars['BigInt']; // BigInt!
    thumbnail?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Server: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    displayName: string; // String!
    domainIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
    id: NexusGenScalars['BigInt']; // BigInt!
    ownerId: NexusGenScalars['BigInt']; // BigInt!
    start: string; // String!
    thumbnail?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
  }
  User: { // root type
    accountId: NexusGenScalars['BigInt']; // BigInt!
    avatar?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    disabled: boolean; // Boolean!
    displayName: string; // String!
    friendIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
    groupChatIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
    id: NexusGenScalars['BigInt']; // BigInt!
    lastSeen: string; // String!
    serverIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Account: { // field return type
    authInfo: NexusGenScalars['AuthInfo'] | null; // AuthInfo
    authProvider: NexusGenEnums['Provider']; // Provider!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    disabled: boolean; // Boolean!
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    id: NexusGenScalars['BigInt']; // BigInt!
    password: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Domain: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    displayName: string; // String!
    id: NexusGenScalars['BigInt']; // BigInt!
    roomIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
    rooms: NexusGenRootTypes['Room'][]; // [Room!]!
    server: NexusGenRootTypes['Server']; // Server!
    serverId: NexusGenScalars['BigInt']; // BigInt!
    start: string; // String!
    thumbnail: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  GroupChat: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    displayName: string; // String!
    id: NexusGenScalars['BigInt']; // BigInt!
    thumbnail: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Query: { // field return type
    serverById: NexusGenRootTypes['Server'] | null; // Server
    userById: NexusGenRootTypes['User'] | null; // User
    userByName: NexusGenRootTypes['User'] | null; // User
    usersCommonality: NexusGenScalars['Json'] | null; // Json
  }
  Room: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    displayName: string; // String!
    domain: NexusGenRootTypes['Domain']; // Domain!
    domainId: NexusGenScalars['BigInt']; // BigInt!
    id: NexusGenScalars['BigInt']; // BigInt!
    thumbnail: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Server: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    displayName: string; // String!
    domainIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
    domains: NexusGenRootTypes['Domain'][]; // [Domain!]!
    id: NexusGenScalars['BigInt']; // BigInt!
    owner: NexusGenRootTypes['User']; // User!
    ownerId: NexusGenScalars['BigInt']; // BigInt!
    start: string; // String!
    thumbnail: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  User: { // field return type
    account: NexusGenRootTypes['Account']; // Account!
    accountId: NexusGenScalars['BigInt']; // BigInt!
    avatar: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    disabled: boolean; // Boolean!
    displayName: string; // String!
    friendIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
    groupChatIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
    groupChats: NexusGenRootTypes['GroupChat'][]; // [GroupChat!]!
    id: NexusGenScalars['BigInt']; // BigInt!
    lastSeen: string; // String!
    ownedServers: NexusGenRootTypes['Server'][]; // [Server!]!
    serverIds: NexusGenScalars['BigInt'][]; // [BigInt!]!
    servers: NexusGenRootTypes['Server'][]; // [Server!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Account: { // field return type name
    authInfo: 'AuthInfo'
    authProvider: 'Provider'
    createdAt: 'DateTime'
    disabled: 'Boolean'
    email: 'EmailAddress'
    id: 'BigInt'
    password: 'String'
    updatedAt: 'DateTime'
    users: 'User'
  }
  Domain: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    displayName: 'String'
    id: 'BigInt'
    roomIds: 'BigInt'
    rooms: 'Room'
    server: 'Server'
    serverId: 'BigInt'
    start: 'String'
    thumbnail: 'String'
    updatedAt: 'DateTime'
  }
  GroupChat: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    displayName: 'String'
    id: 'BigInt'
    thumbnail: 'String'
    updatedAt: 'DateTime'
    userIds: 'BigInt'
    users: 'User'
  }
  Query: { // field return type name
    serverById: 'Server'
    userById: 'User'
    userByName: 'User'
    usersCommonality: 'Json'
  }
  Room: { // field return type name
    createdAt: 'DateTime'
    displayName: 'String'
    domain: 'Domain'
    domainId: 'BigInt'
    id: 'BigInt'
    thumbnail: 'String'
    updatedAt: 'DateTime'
  }
  Server: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    displayName: 'String'
    domainIds: 'BigInt'
    domains: 'Domain'
    id: 'BigInt'
    owner: 'User'
    ownerId: 'BigInt'
    start: 'String'
    thumbnail: 'String'
    updatedAt: 'DateTime'
    userIds: 'BigInt'
    users: 'User'
  }
  User: { // field return type name
    account: 'Account'
    accountId: 'BigInt'
    avatar: 'String'
    createdAt: 'DateTime'
    disabled: 'Boolean'
    displayName: 'String'
    friendIds: 'BigInt'
    groupChatIds: 'BigInt'
    groupChats: 'GroupChat'
    id: 'BigInt'
    lastSeen: 'String'
    ownedServers: 'Server'
    serverIds: 'BigInt'
    servers: 'Server'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Query: {
    serverById: { // args
      id: NexusGenScalars['BigInt']; // BigInt!
    }
    userById: { // args
      id: NexusGenScalars['BigInt']; // BigInt!
    }
    userByName: { // args
      displayName: string; // String!
    }
    usersCommonality: { // args
      firstUserId: NexusGenScalars['BigInt']; // BigInt!
      secondUserId: NexusGenScalars['BigInt']; // BigInt!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: false
    __typename: false
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}