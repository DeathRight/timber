### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  """
  Auth provider ID list. Format: [{"provider": "TWITTER", "id": "id_here"}, ...]
  """
  authInfo: AuthInfo

  """Original/primary auth provider"""
  authProvider: Provider
  createdAt: DateTime!

  """Whether account is globally disabled"""
  disabled: Boolean!
  email: EmailAddress

  """Snowflake (simpleflake) based BigInt ID"""
  id: ID!
  password: String

  """ISO date this row was last updated"""
  updatedAt: DateTime!
  userIds: [BigInt!]!
  users: [User!]!
}

"""
AuthInfo JSON object. Format: [{"provider": "TWITTER", "id": "id_here"}]
"""
scalar AuthInfo

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

type Domain {
  """ISO date the domain was created at"""
  createdAt: DateTime!

  """Description of domain"""
  description: String

  """Global display name"""
  displayName: String!

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!

  """Array of room ids that this domain contains"""
  roomIds: [BigInt!]!

  """Prisma client relation to rooms that this domain contains"""
  rooms: [Room!]!

  """Prisma client relation to server that contains this domain"""
  server: Server!

  """ID of server that contains this domain"""
  serverId: BigInt!

  """Starting room ID"""
  start: String!

  """URL for domain's thumbnail"""
  thumbnail: String

  """ISO date this row was last updated"""
  updatedAt: DateTime!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

type GroupChat {
  """ISO date the group chat was created at"""
  createdAt: DateTime!

  """Description of GroupChat"""
  description: String!

  """Global display name"""
  displayName: String!

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!

  """URL for group chat's thumbnail"""
  thumbnail: String

  """ISO date this row was last updated"""
  updatedAt: DateTime!

  """Array of user IDs that are members of this group chat"""
  userIds: [BigInt!]!

  """Prisma client relation to users who are members of this group chat"""
  users: [User!]!
}

type Invite {
  """Expiration ISO date"""
  expiresAt: DateTime

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!
  party: Party

  """ID of what the invite is for"""
  partyId: BigInt!

  """Invite enum"""
  type: InviteType!
}

input InviteCreateInput {
  """Expiration ISO date"""
  expiresAt: DateTime

  """ID of what the invite is for"""
  partyId: BigInt!
}

enum InviteType {
  Friend
  GroupChat
  Server
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  """Creates a server invite with optional expiration date"""
  createServerInvite(data: InviteCreateInput!): Invite

  """
  Update non-sensitive information of currently logged in user. `lastSeen` will get updated automatically unless a value is provided; if null, does nothing.
  """
  updateUser(data: UserUpdateInput!): User
}

"""
The party object of the invite. Either Server, GroupChat, or User (for friend requests)
"""
union Party = GroupChat | Server | User

enum Provider {
  EMAIL
  GITHUB
  GOOGLE
  TWITTER
}

type Query {
  """Returns server with `id`"""
  serverById(id: BigInt!): Server

  """
  Returns user with `id`. Sensitive fields will be empty unless user is current user
  """
  userById(id: BigInt!): User

  """
  Returns user with `displayName`. Only public fields will be available unless user is current user
  """
  userByName(displayName: String!): User

  """
  Returns serverIds and friendIds common between current user and another user
  """
  userCommonality(uid: BigInt!): Json
}

type Room {
  """ISO date the room was created at"""
  createdAt: DateTime!

  """Global display name"""
  displayName: String!

  """Prisma client relation to domain that contains this room"""
  domain: Domain!

  """ID of domain that contains this room"""
  domainId: BigInt!

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!

  """URL for room's thumbnail"""
  thumbnail: String

  """ISO date this row was last updated"""
  updatedAt: DateTime!
}

type Server {
  """ISO date the server was created at"""
  createdAt: DateTime!

  """Description of server"""
  description: String

  """Global display name"""
  displayName: String!

  """Array of domain IDs that this server contains"""
  domainIds: [BigInt!]!

  """Prisma client relation to domains that this server contains"""
  domains: [Domain!]!

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!

  """Prisma client relation to user that owns the server"""
  owner: User!

  """User ID of the owner"""
  ownerId: BigInt!

  """Starting domain ID"""
  start: String!

  """URL for server's thumbnail"""
  thumbnail: String

  """ISO date this row was last updated"""
  updatedAt: DateTime!

  """Array of user IDs that are members of this server"""
  userIds: [BigInt!]!

  """Prisma client relation to users who are members of this server"""
  users: [User!]!
}

type Subscription {
  """Subscribes to changes for a user"""
  userChanged(uid: BigInt!): User
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User {
  """Prisma client relation to account connected to user"""
  account: Account!

  """Account ID that this user is connected to"""
  accountId: String!

  """URL for user's avatar"""
  avatar: String
  createdAt: DateTime!

  """Whether user is globally disabled"""
  disabled: Boolean!

  """Global display name"""
  displayName: String!

  """Array of user IDs the user is friends with"""
  friendIds: [BigInt!]!

  """Array of GroupChat IDs for group chats the user is a member of"""
  groupChatIds: [BigInt!]!

  """Prisma client relation to group chat's the user is a member of"""
  groupChats: [GroupChat!]!

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!

  """Timestamp in milliseconds since epoch the user was last active"""
  lastSeen: Timestamp!

  """Prisma client relation to servers user owns"""
  ownedServers: [Server!]!

  """Array of server IDs the user is a member of"""
  serverIds: [BigInt!]!

  """Prisma client relation to servers user is a member of"""
  servers: [Server!]!

  """ISO date this row was last updated"""
  updatedAt: DateTime!
}

input UserUpdateInput {
  """URL for user's avatar"""
  avatar: String

  """Global display name"""
  displayName: String

  """Timestamp in milliseconds since epoch the user was last active"""
  lastSeen: Timestamp
}