### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  """
  Auth provider ID list. Format: [{"provider": "TWITTER", "id": "id_here"}, ...]
  """
  authInfo: AuthInfo

  """Original/primary auth provider"""
  authProvider: Provider
  createdAt: DateTime!

  """Whether account is globally disabled"""
  disabled: Boolean!
  email: EmailAddress

  """Snowflake (simpleflake) based BigInt ID"""
  id: ID!
  password: String

  """ISO date this row was last updated"""
  updatedAt: DateTime!
  userIds: [BigInt!]!
  users: [User!]!
}

"""
AuthInfo JSON object. Format: [{"provider": "TWITTER", "id": "id_here"}]
"""
scalar AuthInfo

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

enum DetailPermission {
  DESCRIPTION
  NAME
  THUMBNAIL
}

type Domain {
  """ISO date the domain was created at"""
  createdAt: DateTime!

  """Description of domain"""
  description: String

  """Global display name"""
  displayName: String!

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!

  """Relation to rooms that this domain contains"""
  rooms: [Room!]!

  """Relation to server that contains this domain"""
  server: Server!

  """ID of server that contains this domain"""
  serverId: BigInt!

  """Relation start room"""
  start: Room!

  """Starting room ID"""
  startId: BigInt!

  """URL for domain's thumbnail"""
  thumbnail: URL

  """ISO date this row was last updated"""
  updatedAt: DateTime!
}

input DomainCreateInput {
  """Description of domain"""
  description: String

  """Global display name"""
  displayName: String!

  """ID of server that contains this domain"""
  serverId: BigInt!

  """Display name of first (default) room"""
  startName: String

  """URL for domain's thumbnail"""
  thumbnail: URL
}

input DomainUpdateInput {
  """Description of domain"""
  description: String

  """Global display name"""
  displayName: String

  """Starting room ID"""
  startId: BigInt

  """URL for domain's thumbnail"""
  thumbnail: URL
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

type GroupChat {
  """ISO date the group chat was created at"""
  createdAt: DateTime!

  """Description of GroupChat"""
  description: String!

  """Global display name"""
  displayName: String!

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!

  """Relation to owner of this group chat"""
  owner: User!

  """ID of the User that owns this group chat"""
  ownerId: BigInt!

  """URL for group chat's thumbnail"""
  thumbnail: String

  """ISO date this row was last updated"""
  updatedAt: DateTime!

  """Relation to users who are members of this group chat"""
  users: [User!]!
}

"""
A field whose value is a hex color code: https://en.wikipedia.org/wiki/Web_colors.
"""
scalar HexColorCode @specifiedBy(url: "https://en.wikipedia.org/wiki/Web_colors")

type Invite {
  """Expiration ISO date"""
  expiresAt: DateTime

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!
  party: Party

  """ID of what the invite is for"""
  partyId: BigInt!

  """Invite enum"""
  type: InviteType!
}

input InviteCreateInput {
  """Expiration ISO date"""
  expiresAt: DateTime

  """ID of what the invite is for"""
  partyId: BigInt!
}

enum InviteType {
  Friend
  GroupChat
  Server
}

input InviteUpdateInput {
  """Expiration ISO date"""
  expiresAt: DateTime

  """IDs of who can view the invite. Everyone if empty"""
  recipientIds: [BigInt!]!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum ModPermission {
  BAN
  DELETE
  EDIT
  INVITE
  MUTE
  ROLE
}

type Mutation {
  """
  Accepts an invite and removes client from recipients list if applicable, and if last, deletes invite
  """
  acceptInvite(id: BigInt!): Invite

  """Creates a domain and updates server to reflect"""
  createDomain(data: DomainCreateInput!): Domain

  """Creates a friend invite to user with ID `uid`"""
  createFriendInvite(uid: BigInt!): Invite

  """Creates a Group Chat invite with optional expiration date"""
  createGroupChatInvite(data: InviteCreateInput!): Invite

  """Creates a room and updates domain to reflect"""
  createRoom(data: RoomCreateInput!): Room

  """Creates a server and updates current user to reflect"""
  createServer(data: ServerCreateInput!): Server

  """Creates a server invite with optional expiration date"""
  createServerInvite(data: InviteCreateInput!): Invite

  """Create user on currently logged in account."""
  createUser(data: UserCreateInput!): User

  """Deletes an invite so it is no longer usable"""
  deleteInvite(id: BigInt!): Invite

  """Update non-sensitive information of a domain."""
  updateDomain(data: DomainUpdateInput!, id: BigInt!): Domain

  """Update non-sensitive information of a room"""
  updateRoom(data: RoomUpdateInput!, id: BigInt!): Room

  """Update non-sensitive information of a server."""
  updateServer(data: ServerUpdateInput!, id: BigInt!): Server

  """Update non-sensitive information of ServerUser with ID `id`"""
  updateServerUser(data: ServerUserUpdateInput!, id: BigInt!): ServerUser

  """
  Update non-sensitive information of currently logged in user. `lastSeen` will get updated automatically unless a value is provided; if null, does nothing.
  """
  updateUser(data: UserUpdateInput!): User
}

"""
The party object of the invite. Either Server, GroupChat, or User (for friend requests)
"""
union Party = GroupChat | Server | User

enum Permission {
  CREATE
  DELETE
  READ
  UPDATE
}

enum Provider {
  EMAIL
  GITHUB
  GOOGLE
  TWITTER
}

type Query {
  """Returns domain with `id`"""
  domainById(id: BigInt!): Domain

  """Gets invite by id `id`. Will throw an error if not on recipients list"""
  getInviteById(id: BigInt!): Invite

  """
  Gets a list of all invites by partyId `id`. InviteType `type` must be specified for permission check
  """
  getInvitesByPartyId(id: BigInt!, type: InviteType!): [Invite]

  """Returns room with `id`"""
  roomById(id: BigInt!): Room

  """Returns server with `id`"""
  serverById(id: BigInt!): Server

  """
  Returns ServerUser with `id`. Sensitive fields will be empty unless base user is current user
  """
  serverUserById(id: BigInt!): ServerUser

  """
  Returns ServerUser by `uId` and `sId`. Sensitive fields will be empty unless base user is current user
  """
  serverUserByServerId(sId: BigInt!, uId: BigInt!): ServerUser

  """Returns a JSON enum object of TopicPayloadType"""
  topicPayloadTypes: TopicPayloadTypes

  """
  Returns user with `id`. Sensitive fields will be empty unless user is current user
  """
  userById(id: BigInt!): User

  """
  Returns user with `displayName`. Only public fields will be available unless user is current user
  """
  userByName(displayName: String!): User

  """
  Returns serverIds and friendIds common between current user and another user
  """
  userCommonality(uid: BigInt!): Json
}

type Role {
  """
  An admin of the server. Full permissions (except delete server) and 2nd in hierarchy
  """
  admin: Boolean!

  """HEX color code associated with the Role"""
  color: HexColorCode!

  """ISO date the Role was created at"""
  createdAt: DateTime!

  """Display name of the Role"""
  displayName: String!

  """Global domain CRUD permissions"""
  domainCrud: [Permission!]!

  """Global domain Details permissions"""
  domainDetails: [DetailPermission!]!

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!

  """Relation to serverUsers that are members of this role"""
  members: [ServerUser!]!

  """User moderation permissions"""
  modPerms: [ModPermission!]!

  """
  Place in role hierarchy, descending. 1st cannot be touched by 2nd, and so on. Must be unique across servers
  """
  order: Int!

  """
  Owner of the server. Full permissions, and the only one that can delete the server. 1st in hierarchy
  """
  owner: Boolean!

  """Global room CRUD permissions"""
  roomCrud: [Permission!]!

  """Global room Details permissions"""
  roomDetails: [DetailPermission!]!

  """Relation to associated server"""
  server: Server!

  """Server Details permissions"""
  serverDetails: [DetailPermission!]!

  """ID of associated server"""
  serverId: BigInt!

  """ISO date this row was last updated"""
  updatedAt: DateTime!
}

type Room {
  """ISO date the room was created at"""
  createdAt: DateTime!

  """Global display name"""
  displayName: String!

  """Relation to domain that contains this room"""
  domain: Domain!

  """ID of domain that contains this room"""
  domainId: BigInt!

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!

  """URL for room's thumbnail"""
  thumbnail: String

  """ISO date this row was last updated"""
  updatedAt: DateTime!
}

input RoomCreateInput {
  """Global display name"""
  displayName: String!

  """ID of domain that contains this room"""
  domainId: BigInt!

  """URL for room's thumbnail"""
  thumbnail: URL
}

input RoomUpdateInput {
  """Global display name"""
  displayName: String

  """URL for room's thumbnail"""
  thumbnail: URL
}

type Server {
  """ISO date the server was created at"""
  createdAt: DateTime!

  """Description of server"""
  description: String

  """Global display name"""
  displayName: String!

  """Relation to domains that this server contains"""
  domains: [Domain!]!

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!

  """Relation to user that owns the server"""
  owner: User!

  """User ID of the owner"""
  ownerId: BigInt!

  """Relation to start domain"""
  start: Domain!

  """Starting domain ID"""
  startId: BigInt!

  """URL for server's thumbnail"""
  thumbnail: URL

  """ISO date this row was last updated"""
  updatedAt: DateTime!

  """Relation to users who are members of this server"""
  users: [User!]!
}

input ServerCreateInput {
  """Description of server"""
  description: String

  """Global display name"""
  displayName: String!

  """Display name of first (default) domain"""
  startName: String

  """URL for server's thumbnail"""
  thumbnail: URL
}

input ServerUpdateInput {
  """Description of server"""
  description: String

  """Global display name"""
  displayName: String

  """Starting domain ID"""
  startId: BigInt

  """URL for server's thumbnail"""
  thumbnail: URL
}

type ServerUser {
  """Either server specific avatar, or global avatar from base User"""
  avatar: URL

  """ISO date the ServerUser was created at (when they joined)"""
  createdAt: DateTime!

  """
  Server-specific displayName, if not defined or empty, will use the base User displayName
  """
  displayName: String

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!

  """Relation to roles this ServerUser is a member of"""
  roles: [Role!]!

  """Relation to associated server"""
  server: Server!

  """ID of the associated server"""
  serverId: BigInt!

  """ISO date this row was last updated"""
  updatedAt: DateTime!

  """Relation to base user"""
  user: User!

  """ID of the base user"""
  userId: BigInt!
}

input ServerUserCreateInput {
  avatar: URL

  """
  Server-specific displayName, if not defined or empty, will use the base User displayName
  """
  displayName: String
}

input ServerUserUpdateInput {
  avatar: URL

  """
  Server-specific displayName, if not defined or empty, will use the base User displayName
  """
  displayName: String
}

type Subscription {
  """
  Subscribes to changes for a domain (snapshots), first attempting to return the current snapshot
  """
  domainSnapshot(id: BigInt!): Domain

  """
  Subscribes to changes for a room (snapshots), first attempting to return the current snapshot
  """
  roomSnapshot(id: BigInt!): Room

  """
  Subscribes to changes for a server (snapshots), first attempting to return the current snapshot
  """
  serverSnapshot(id: BigInt!): Server

  """
  Subscribes to changes for a ServerUser (snapshots), first attempting to return the current snapshot. `sid` is optional serverId. If `sid` is present, `uid` should be userId, otherwise, the ID of the ServerUser.
  """
  serverUserSnapshot(sid: BigInt, uid: BigInt!): ServerUser

  """
  Subscribes to changes for a user (snapshots), first attempting to return the current snapshot
  """
  userSnapshot(uid: BigInt!): User
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""TopicPayloadTypes as enum object"""
scalar TopicPayloadTypes

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type User {
  """Relation to account connected to user"""
  account: Account!

  """Account ID that this user is connected to"""
  accountId: String!

  """URL for user's avatar"""
  avatar: URL
  createdAt: DateTime!

  """Whether user is globally disabled"""
  disabled: Boolean!

  """Global display name"""
  displayName: String!

  """Relation to group chats the user is a member of"""
  groupChats: [GroupChat!]!

  """Snowflake (simpleflake) based BigInt ID"""
  id: BigInt!

  """Timestamp in milliseconds since epoch the user was last active"""
  lastSeen: Timestamp!

  """Relation to servers user owns"""
  ownedServers: [Server!]!

  """Relation to servers user is a member of"""
  servers: [Server!]!

  """ISO date this row was last updated"""
  updatedAt: DateTime!
}

input UserCreateInput {
  """URL for user's avatar"""
  avatar: URL

  """Global display name"""
  displayName: String!
}

input UserUpdateInput {
  """URL for user's avatar"""
  avatar: URL

  """Global display name"""
  displayName: String

  """Timestamp in milliseconds since epoch the user was last active"""
  lastSeen: Timestamp
}